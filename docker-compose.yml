version: '3.8'
services:
  # Base de datos PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: paint_store_db
    environment:
      POSTGRES_DB: paintstore
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - paint_network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: paint_store_backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=paintstore
      - DB_USER=admin
      - DB_PASSWORD=password123
    depends_on:
      - database
    networks:
      - paint_network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: paint_store_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - paint_network
    restart: unless-stopped

  # Jenkins CI/CD
  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    container_name: paint_store_jenkins
    user: "1000:1001"  # UID:GID del usuario jenkins - SOLUCIÃ“N AGREGADA
    ports:
      - "8080:8080"    # Interface web de Jenkins
      - "50000:50000"  # Puerto para agentes
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock  # Para usar Docker desde Jenkins
      - .:/workspace    # Montar el proyecto completo
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - DOCKER_HOST=unix:///var/run/docker.sock
    networks:
      - paint_network
    restart: unless-stopped

networks:
  paint_network:
    driver: bridge

volumes:
  postgres_data:
  jenkins_home: